// CSS3 PREFIXER
// @include prefixer(property, value, default);
@mixin prefixer($prop: none, $value: none, $native: true) {
    @if ($prop != none and $value != none) {
        -webkit-#{$prop}: $value;
        -moz-#{$prop}: $value;
        -ms-#{$prop}: $value;
        -o-#{$prop}: $value;

        @if ($native == true) {
            #{$prop}: $value;
        }
    }
}

// MEDIA QUERY PREFIXER
// @include media(only screen and (max-width: 800px)) { }
@mixin media($query: none) {
    @if ($query != none) {
        @media #{$query} {
            @content;
        }
    }
}

// FONT-FACE GENERATOR MIXINS.
// @include font-family(NAME SOURCE STYLE STRETCH WEIGHT);
@mixin font-family($font: 'arial' 'font/arial' 400 normal normal) {
    $name: nth($font, 1); $src: nth($font, 2); $style: normal; $weight: 400; $stretch: normal;

    @if length($font) == 3 {
        $style		: nth($font, 4);
    }
    @if length($font) == 4 {
        $stretch	: nth($font, 5);
    }
    @if length($font) == 5 {
        $weight		: nth($font, 3);
    }

    @font-face {
        font-family : "#{$name}";
        src: local("#{$name}");

        src: url("#{$src}.eot");
        src: url("#{$src}.eot#iefix") format("embedded-opentype"),
             url("#{$src}.svg") format("svg"),
             url("#{$src}.ttf") format("truetype"),
             url("#{$src}.woff") format("woff");

        font-style		: $style;
        font-weight		: $weight;
        font-stretch	: $stretch;
    }
}

// COMPLEX FONT GENERATOR.
// @include font-faces(FONT-NAME SOURCE-FOLDER, STYLE);
@mixin font-faces($font: 'arial' 'assets/font/', $style: regular) {
    @for $i from 1 through length($style) {
        @include font-family('#{nth($font, 1)} #{nth($style, $i)}' '#{nth($font, 2)}#{nth($font, 1)}-#{nth($style, $i)}');
    }
}

// BORDER SHORTHAND MIXINS.
// @include border(0 10px solid #333);
// @include border (0 10px 16px 20px solid #333);
@mixin border($borval: 0 0 solid #000) {
    $top: none; $rgt: none; $btm: none; $lft: none; $stl: none; $clr: none;

    // top-bottom left-right
    @if length($borval) >= 4 {
        $top: nth($borval, 1); $rgt: nth($borval, 2); $btm: nth($borval, 1); $lft: nth($borval, 2);

        $stl: nth($borval, 3); $clr: nth($borval, 4);
    }

    // top right bottom
    @if length($mobile >= 5) {
        $btm: nth($borval, 3); $lft: none;

        $stl: nth($borval, 4); $clr: nth($borval, 5);
    }

    // top right bottom left
    @if length($borval) == 6 {
        $btm: nth($borval, 3); $lft: nth($borval, 4);

        $stl: nth($borval, 5); $clr: nth($borval, 6);
    }

    @if ($stl != none) {
        border-style: $stl;
    }
    @if ($clr != none) {
        border-color: $clr;
    }
    @if ($top != none) {
        border-top-width: $top;
    }
    @if ($rgt != none) {
        border-right-width: $rgt;
    }
    @if ($btm != none) {
        border-bottom-width: $btm;
    }
    @if ($lft != none) {
        border-left-width: $lft;
    }
}

// LONG SHADOW GENERATOR.
// @include long-shadow-generator(top, left, distance, blur, color);
@mixin long-shadow-generator($type, $config) {
    @if (length($config == 5)) {
        $tpe: nth($type, 1);
        $top: nth($config, 1);
        $lft: nth($config, 2);
        $dis: nth($config, 3);
        $blr: nth($config, 4);
        $clr: nth($config, 5);

        $value: shadow-value($top, $lft, $dis, $blr, $clr);

        @include prefixer($type, $value, true);
    }
}

// DISPLAY SETTER.
@mixin set-display($display: none, $size: none) {
    display: $display;

    @if ($size != none and length($size) >= 1) {
        @if (length($size) == 1) {
            width: nth($size, 1);
            height: nth($size, 1);
        }
        @else {
            width: nth($size, 1);
            height: nth($size, 2);
        }
    }
}
